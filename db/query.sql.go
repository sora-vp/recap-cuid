// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const deleteSpecificParticipant = `-- name: DeleteSpecificParticipant :exec
DELETE FROM participants WHERE cuid = ?
`

func (q *Queries) DeleteSpecificParticipant(ctx context.Context, cuid string) error {
	_, err := q.db.ExecContext(ctx, deleteSpecificParticipant, cuid)
	return err
}

const getSpecificParticipant = `-- name: GetSpecificParticipant :one
SELECT name, subpart FROM participants
WHERE cuid = ?
`

type GetSpecificParticipantRow struct {
	Name    string
	Subpart string
}

func (q *Queries) GetSpecificParticipant(ctx context.Context, cuid string) (GetSpecificParticipantRow, error) {
	row := q.db.QueryRowContext(ctx, getSpecificParticipant, cuid)
	var i GetSpecificParticipantRow
	err := row.Scan(&i.Name, &i.Subpart)
	return i, err
}

const insertNewParticipant = `-- name: InsertNewParticipant :exec
INSERT INTO participants (cuid, name, subpart) VALUES (?, ?, ?)
`

type InsertNewParticipantParams struct {
	Cuid    string
	Name    string
	Subpart string
}

func (q *Queries) InsertNewParticipant(ctx context.Context, arg InsertNewParticipantParams) error {
	_, err := q.db.ExecContext(ctx, insertNewParticipant, arg.Cuid, arg.Name, arg.Subpart)
	return err
}

const listAllParticipants = `-- name: ListAllParticipants :many
SELECT name, subpart, cuid, created_at FROM participants
`

type ListAllParticipantsRow struct {
	Name      string
	Subpart   string
	Cuid      string
	CreatedAt time.Time
}

func (q *Queries) ListAllParticipants(ctx context.Context) ([]ListAllParticipantsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllParticipants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllParticipantsRow
	for rows.Next() {
		var i ListAllParticipantsRow
		if err := rows.Scan(
			&i.Name,
			&i.Subpart,
			&i.Cuid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
